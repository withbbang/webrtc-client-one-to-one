{"version":3,"sources":["App.js","index.js"],"names":["pc_config","iceServers","urls","App","socketRef","useRef","pcRef","localVideoRef","remoteVideoRef","setVideoTracks","a","navigator","mediaDevices","getUserMedia","video","audio","stream","current","srcObject","getTracks","forEach","track","addTrack","onicecandidate","e","candidate","console","log","emit","oniceconnectionstatechange","ontrack","ev","streams","room","error","createOffer","offerToReceiveAudio","offerToReceiveVideo","sdp","setLocalDescription","RTCSessionDescription","createAnswer","setRemoteDescription","mySdp","useEffect","io","connect","RTCPeerConnection","on","allUsers","length","addIceCandidate","RTCIceCandidate","disconnect","close","style","width","height","margin","backgroundColor","muted","ref","autoPlay","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec6d0e34.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport io from \"socket.io-client\";\n\nconst pc_config = {\n  iceServers: [\n    // {\n    //   urls: 'stun:[STUN_IP]:[PORT]',\n    //   'credentials': '[YOR CREDENTIALS]',\n    //   'username': '[USERNAME]'\n    // },\n    {\n      urls: \"stun:stun.l.google.com:19302\",\n    },\n  ],\n};\nconst SOCKET_SERVER_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8080\"\n    : \"https://webrtc-server-one-to-one.herokuapp.com/\";\n\nconst App = () => {\n  const socketRef = useRef();\n  const pcRef = useRef();\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n\n  const setVideoTracks = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true,\n      });\n      if (localVideoRef.current) localVideoRef.current.srcObject = stream;\n      if (!(pcRef.current && socketRef.current)) return;\n      stream.getTracks().forEach((track) => {\n        if (!pcRef.current) return;\n        pcRef.current.addTrack(track, stream);\n      });\n      pcRef.current.onicecandidate = (e) => {\n        if (e.candidate) {\n          if (!socketRef.current) return;\n          console.log(\"onicecandidate\");\n          socketRef.current.emit(\"candidate\", e.candidate);\n        }\n      };\n      pcRef.current.oniceconnectionstatechange = (e) => {\n        console.log(e);\n      };\n      pcRef.current.ontrack = (ev) => {\n        console.log(\"add remotetrack success\");\n        if (remoteVideoRef.current) {\n          remoteVideoRef.current.srcObject = ev.streams[0];\n        }\n      };\n      socketRef.current.emit(\"join_room\", {\n        room: \"1234\",\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const createOffer = async () => {\n    console.log(\"create offer\");\n    if (!(pcRef.current && socketRef.current)) return;\n    try {\n      const sdp = await pcRef.current.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n      });\n      await pcRef.current.setLocalDescription(new RTCSessionDescription(sdp));\n      socketRef.current.emit(\"offer\", sdp);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const createAnswer = async (sdp) => {\n    if (!(pcRef.current && socketRef.current)) return;\n    try {\n      await pcRef.current.setRemoteDescription(new RTCSessionDescription(sdp));\n      console.log(\"answer set remote description success\");\n      const mySdp = await pcRef.current.createAnswer({\n        offerToReceiveVideo: true,\n        offerToReceiveAudio: true,\n      });\n      console.log(\"create answer\");\n      await pcRef.current.setLocalDescription(new RTCSessionDescription(mySdp));\n      socketRef.current.emit(\"answer\", mySdp);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  useEffect(() => {\n    socketRef.current = io.connect(SOCKET_SERVER_URL);\n    pcRef.current = new RTCPeerConnection(pc_config);\n\n    socketRef.current.on(\"all_users\", (allUsers) => {\n      if (allUsers.length > 0) {\n        createOffer();\n      }\n    });\n\n    socketRef.current.on(\"getOffer\", (sdp) => {\n      //console.log(sdp);\n      console.log(\"get offer\");\n      createAnswer(sdp);\n    });\n\n    socketRef.current.on(\"getAnswer\", (sdp) => {\n      console.log(\"get answer\");\n      if (!pcRef.current) return;\n      pcRef.current.setRemoteDescription(new RTCSessionDescription(sdp));\n      //console.log(sdp);\n    });\n\n    socketRef.current.on(\"getCandidate\", async (candidate) => {\n      if (!pcRef.current) return;\n      await pcRef.current.addIceCandidate(new RTCIceCandidate(candidate));\n      console.log(\"candidate add success\");\n    });\n\n    setVideoTracks();\n\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n      if (pcRef.current) {\n        pcRef.current.close();\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <video\n        style={{\n          width: 240,\n          height: 240,\n          margin: 5,\n          backgroundColor: \"black\",\n        }}\n        muted\n        ref={localVideoRef}\n        autoPlay\n      />\n      <video\n        id=\"remotevideo\"\n        style={{\n          width: 240,\n          height: 240,\n          margin: 5,\n          backgroundColor: \"black\",\n        }}\n        ref={remoteVideoRef}\n        autoPlay\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}